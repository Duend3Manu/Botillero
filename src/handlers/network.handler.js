// En: src/handlers/network.handler.js
"use strict";

const pythonService = require('../services/python.service');
const geminiService = require('../services/gemini.service.js');
const { safeReact } = require('../utils/reaction.util');

/**
 * Ejecuta el script de Python 'net_analyzer.py', toma su salida t√©cnica,
 * y la env√≠a a Gemini para que la analice y la presente de forma amigable.
 */
async function handleWhoisAnalysis(message) {
    const target = message.body.split(' ')[1];
    if (!target) {
        return message.reply("Por favor, indica un dominio o IP para analizar. Ejemplo: `!whois google.com`");
    }

    await safeReact(message, 'üì°');

    try {
        // 1. Ejecutamos el script de Python y obtenemos su salida t√©cnica (stdout)
        console.log(`(DEBUG) -> Ejecutando net_analyzer.py para: ${target}`);
        const { stdout: technicalReport } = await pythonService.executePythonScript('net_analyzer.py', [target]);

        // Si el reporte est√° vac√≠o o es muy corto (menos de 50 caracteres), 
        // significa que no se recolect√≥ casi nada. No molestamos a la IA.
        if (!technicalReport || technicalReport.trim().length < 50) {
            await safeReact(message, 'ü§∑');
            return message.reply(`No se pudo recolectar suficiente informaci√≥n para analizar *"${target}"*. Es probable que el dominio est√© muy protegido o no exista.`);
        }
        // --- FIN DE LA MEJORA ---
        console.log(`(DEBUG) -> Reporte t√©cnico recibido, enviando a Gemini para an√°lisis...`);
        // 2. Creamos un prompt para que Gemini analice el reporte (ahora con la seguridad de que hay datos)
        const prompt = `
        Act√∫a como un analista de ciberseguridad que explica un reporte a un amigo.
        Te dar√© un reporte t√©cnico sobre un dominio y quiero que lo resumas en un lenguaje simple, con emojis y en formato para WhatsApp.
        Destaca los puntos m√°s importantes (buenos y malos) y da una conclusi√≥n general. Si hay errores como "timed out" o "conexi√≥n denegada", expl√≠calos de forma sencilla.

        Este es el reporte t√©cnico:
        ---
        ${technicalReport}
        ---

        Ahora, genera tu an√°lisis amigable.
        `.trim();

        // 3. Enviamos el reporte a Gemini para que lo "traduzca"
        const friendlyAnalysis = await geminiService.generateText(prompt);

        // 4. Enviamos el an√°lisis de la IA al usuario
        await safeReact(message, 'üí°');
        return message.reply(friendlyAnalysis);

    } catch (error) {
        console.error("Error al ejecutar handleWhoisAnalysis:", error);
        await safeReact(message, '‚ùå');
        // El servicio de Python ya registra el error detallado en la consola.
        return message.reply("Ocurri√≥ un error al ejecutar el an√°lisis. Revisa la consola para m√°s detalles.");
    }
}

module.exports = { handleWhoisAnalysis };